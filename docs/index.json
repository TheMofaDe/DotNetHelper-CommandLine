{
  "api/DotNetHelper_CommandLine.CommandPrompt.html": {
    "href": "api/DotNetHelper_CommandLine.CommandPrompt.html",
    "title": "Class CommandPrompt | DotNetHelper-CommandLine",
    "keywords": "Class CommandPrompt A command-line helper class that makes it easy to run commands. Inheritance Object CommandPrompt Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_CommandLine Assembly : DotNetHelper-CommandLine.dll Syntax public class CommandPrompt : IDisposable Constructors | Improve this Doc View Source CommandPrompt() Declaration public CommandPrompt() | Improve this Doc View Source CommandPrompt(Boolean) Declaration public CommandPrompt(bool hideWindow) Parameters Type Name Description Boolean hideWindow | Improve this Doc View Source CommandPrompt(String, String, Boolean) Declaration public CommandPrompt(string runAsUser, string password, bool hideWindow) Parameters Type Name Description String runAsUser String password Boolean hideWindow Properties | Improve this Doc View Source CreateNoWindow Declaration public bool CreateNoWindow { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RunAsUser Declaration public string RunAsUser { get; } Property Value Type Description String | Improve this Doc View Source TimeOut Declaration public TimeSpan TimeOut { get; set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source CreateSecurePassword(String) Declaration public SecureString CreateSecurePassword(string password) Parameters Type Name Description String password Returns Type Description SecureString | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetProcess(String) Starts a new instance of a command terminal and runs the specified command Declaration public Process GetProcess(string command) Parameters Type Name Description String command the command to run Returns Type Description Process the process | Improve this Doc View Source GetProcess(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public Process GetProcess(string command, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived) Parameters Type Name Description String command the command to run EventHandler exited Occurs when the process exits DataReceivedEventHandler outputDataReceived event handler for responses return during the execution of the command DataReceivedEventHandler errorDataReceived event handler for error responses return during the execution of the command Returns Type Description Process the process | Improve this Doc View Source GetProcess(String, String) Starts a new instance of a command terminal and runs the specified command Declaration public Process GetProcess(string command, string workingDirectory) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run Returns Type Description Process the process | Improve this Doc View Source GetProcess(String, String, EventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public Process GetProcess(string command, string workingDirectory, EventHandler exited) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run EventHandler exited Occurs when the process exits Returns Type Description Process the process | Improve this Doc View Source GetProcess(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public Process GetProcess(string command, string workingDirectory, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run EventHandler exited Occurs when the process exits DataReceivedEventHandler outputDataReceived event handler for responses return during the execution of the command DataReceivedEventHandler errorDataReceived event handler for error responses return during the execution of the command Returns Type Description Process the process | Improve this Doc View Source RunCommand(String) Starts a new instance of a command terminal and runs the specified command Declaration public int? RunCommand(string command) Parameters Type Name Description String command the command to run Returns Type Description Nullable < Int32 > the process Exit Code | Improve this Doc View Source RunCommand(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public int? RunCommand(string command, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived) Parameters Type Name Description String command the command to run EventHandler exited Occurs when the process exits DataReceivedEventHandler outputDataReceived event handler for responses return during the execution of the command DataReceivedEventHandler errorDataReceived event handler for error responses return during the execution of the command Returns Type Description Nullable < Int32 > the process Exit Code | Improve this Doc View Source RunCommand(String, String) Starts a new instance of a command terminal and runs the specified command Declaration public int? RunCommand(string command, string workingDirectory) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run Returns Type Description Nullable < Int32 > the process Exit Code | Improve this Doc View Source RunCommand(String, String, EventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public int? RunCommand(string command, string workingDirectory, EventHandler exited) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run EventHandler exited Occurs when the process exits Returns Type Description Nullable < Int32 > the process Exit Code | Improve this Doc View Source RunCommand(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler) Starts a new instance of a command terminal and runs the specified command Declaration public int? RunCommand(string command, string workingDirectory, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived) Parameters Type Name Description String command the command to run String workingDirectory sets the working directory for the command to be run EventHandler exited Occurs when the process exits DataReceivedEventHandler outputDataReceived event handler for responses return during the execution of the command DataReceivedEventHandler errorDataReceived event handler for error responses return during the execution of the command Returns Type Description Nullable < Int32 > the process Exit Code | Improve this Doc View Source UpdateDefaultUserAndPassword(String, String) Declaration public void UpdateDefaultUserAndPassword(string runAsUser, string password) Parameters Type Name Description String runAsUser String password Implements System.IDisposable"
  },
  "api/DotNetHelper_CommandLine.UnixCommands.html": {
    "href": "api/DotNetHelper_CommandLine.UnixCommands.html",
    "title": "Class UnixCommands | DotNetHelper-CommandLine",
    "keywords": "Class UnixCommands Helper class for common commands Inheritance Object UnixCommands Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_CommandLine Assembly : DotNetHelper-CommandLine.dll Syntax public static class UnixCommands Methods | Improve this Doc View Source AbortShutDownOrReboot() returns the hcommand for aborting a shutdown or restart Declaration public static string AbortShutDownOrReboot() Returns Type Description String | Improve this Doc View Source CopyDirectory(String, String) Copy one directory to another Declaration public static string CopyDirectory(string from, string to) Parameters Type Name Description String from String to Returns Type Description String | Improve this Doc View Source CreateDirectory(String) returns the command to create the specified directory Declaration public static string CreateDirectory(string path) Parameters Type Name Description String path Returns Type Description String | Improve this Doc View Source GetAttribute(String) Sets ownership on files and directories Declaration public static string GetAttribute(string fileOrPath) Parameters Type Name Description String fileOrPath Returns Type Description String | Improve this Doc View Source GetEnvironmentVariables() Declaration public static string GetEnvironmentVariables() Returns Type Description String | Improve this Doc View Source GetOsVersion() return the command to get the Operating System version Declaration public static string GetOsVersion() Returns Type Description String | Improve this Doc View Source GetSystemInfo() return command for getting system info Declaration public static string GetSystemInfo() Returns Type Description String | Improve this Doc View Source GetTaskList() returns the command get the task list Declaration public static string GetTaskList() Returns Type Description String | Improve this Doc View Source MapDrive(Char, String) returns the command for mapping a drive Declaration public static string MapDrive(char driveLetter, string path) Parameters Type Name Description Char driveLetter String path Returns Type Description String | Improve this Doc View Source MoveFile(String, String) returns the commands for moving the specified file Declaration public static string MoveFile(string from, string to) Parameters Type Name Description String from String to Returns Type Description String | Improve this Doc View Source OpenControlPanel() returns the command for opening the control panel Declaration public static string OpenControlPanel() Returns Type Description String | Improve this Doc View Source OpenServices() returns the command for opening the services Declaration public static string OpenServices() Returns Type Description String | Improve this Doc View Source Ping(String) returns the command to get ping the specified host Declaration public static string Ping(string host) Parameters Type Name Description String host Returns Type Description String | Improve this Doc View Source Reboot(Boolean, Nullable<TimeSpan>, String) returns the command for rebooting the host Declaration public static string Reboot(bool force, TimeSpan? delay = default(TimeSpan? ), string message = null) Parameters Type Name Description Boolean force Nullable < TimeSpan > delay String message Returns Type Description String | Improve this Doc View Source RemoveDirectory(String) Windows has a y/ n prompt.To get the prompt with Unix, use rm - i.The i means \"interactive\". Declaration public static string RemoveDirectory(string directory) Parameters Type Name Description String directory Returns Type Description String | Improve this Doc View Source Shutdown(Boolean) returns the command for shutting down the host Declaration public static string Shutdown(bool force) Parameters Type Name Description Boolean force Returns Type Description String | Improve this Doc View Source TailFile(String, Int32) returns command for tailing the specified files Declaration public static string TailFile(string fullFilePath, int outputLastLine = 10) Parameters Type Name Description String fullFilePath Int32 outputLastLine Returns Type Description String | Improve this Doc View Source UnMapDrive(Char) returns the command for un-mapping a drive Declaration public static string UnMapDrive(char driveLetter) Parameters Type Name Description Char driveLetter Returns Type Description String"
  },
  "api/DotNetHelper_CommandLine.html": {
    "href": "api/DotNetHelper_CommandLine.html",
    "title": "Namespace DotNetHelper_CommandLine | DotNetHelper-CommandLine",
    "keywords": "Namespace DotNetHelper_CommandLine Classes CommandPrompt A command-line helper class that makes it easy to run commands. UnixCommands Helper class for common commands"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper-CommandLine",
    "keywords": "SAMPLE ARTICLE"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper-CommandLine | DotNetHelper-CommandLine",
    "keywords": "DotNetHelper-CommandLine A cross-platform command-line helper class that makes it easy to run commands. This library also comes with commonly used command see api docs for examples. || View on Github || Features Runs terminal commands Works on linux & windows How to use static void Main(string[] args) { var cmd = new CommandPrompt(); var exitCode = cmd.RunCommand(\"ping www.google.com\"), null,Exited, OnDataReceived, ErrorDataReceived); // RETURNS 0 var exitCode1 = cmd.RunCommand(\"ping This is not a valid command\"), null, OnDataReceived, ErrorDataReceived, Exited); // RETURN 1 Console.ReadLine(); } private static void Exited(object sender, EventArgs e) { Console.WriteLine(\"command has finished.\"); } private static void ErrorDataReceived(object sender, DataReceivedEventArgs e) { Console.WriteLine(\"error : \" + e.Data); } private static void OnDataReceived(object sender, DataReceivedEventArgs args) { Console.WriteLine(\"received data : \" + args.Data); } } Results from sample code <!-- Links. --> <!-- Documentation Links. -->"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "THIS IS THE HOME PAGE TO TUTORIALS | DotNetHelper-CommandLine",
    "keywords": "THIS IS THE HOME PAGE TO TUTORIALS"
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper-CommandLine",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper-CommandLine",
    "keywords": "SAMPLE ARTICLE"
  }
}