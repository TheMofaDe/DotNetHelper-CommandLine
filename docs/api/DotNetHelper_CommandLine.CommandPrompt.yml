### YamlMime:ManagedReference
items:
- uid: DotNetHelper_CommandLine.CommandPrompt
  commentId: T:DotNetHelper_CommandLine.CommandPrompt
  id: CommandPrompt
  parent: DotNetHelper_CommandLine
  children:
  - DotNetHelper_CommandLine.CommandPrompt.#ctor
  - DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  - DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  - DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  - DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  - DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo(System.String,System.String,System.Boolean)
  - DotNetHelper_CommandLine.CommandPrompt.Dispose
  - DotNetHelper_CommandLine.CommandPrompt.ErrorDataReceived
  - DotNetHelper_CommandLine.CommandPrompt.Exited
  - DotNetHelper_CommandLine.CommandPrompt.OutputDataReceived
  - DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  - DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit(System.String,System.String,System.Nullable{System.TimeSpan})
  - DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync(System.String,System.String,System.Threading.CancellationToken)
  - DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  langs:
  - csharp
  - vb
  name: CommandPrompt
  nameWithType: CommandPrompt
  fullName: DotNetHelper_CommandLine.CommandPrompt
  type: Class
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: CommandPrompt
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 14
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nA command-line helper class that makes it easy to run commands.\n"
  example: []
  syntax:
    content: 'public class CommandPrompt : IDisposable'
    content.vb: >-
      Public Class CommandPrompt
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  commentId: P:DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  id: RunAsUser
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunAsUser
  nameWithType: CommandPrompt.RunAsUser
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  type: Property
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: RunAsUser
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 16
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public string RunAsUser { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RunAsUser As String
  overload: DotNetHelper_CommandLine.CommandPrompt.RunAsUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_CommandLine.CommandPrompt.Exited
  commentId: E:DotNetHelper_CommandLine.CommandPrompt.Exited
  id: Exited
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: Exited
  nameWithType: CommandPrompt.Exited
  fullName: DotNetHelper_CommandLine.CommandPrompt.Exited
  type: Event
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: Exited
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 21
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nOccurs when the process exits\n"
  example: []
  syntax:
    content: public event EventHandler Exited
    return:
      type: System.EventHandler
    content.vb: Public Event Exited As EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.OutputDataReceived
  commentId: E:DotNetHelper_CommandLine.CommandPrompt.OutputDataReceived
  id: OutputDataReceived
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: OutputDataReceived
  nameWithType: CommandPrompt.OutputDataReceived
  fullName: DotNetHelper_CommandLine.CommandPrompt.OutputDataReceived
  type: Event
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: OutputDataReceived
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 25
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nevent handler for responses return during the execution of the command\n"
  example: []
  syntax:
    content: public event DataReceivedEventHandler OutputDataReceived
    return:
      type: System.Diagnostics.DataReceivedEventHandler
    content.vb: Public Event OutputDataReceived As DataReceivedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.ErrorDataReceived
  commentId: E:DotNetHelper_CommandLine.CommandPrompt.ErrorDataReceived
  id: ErrorDataReceived
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: ErrorDataReceived
  nameWithType: CommandPrompt.ErrorDataReceived
  fullName: DotNetHelper_CommandLine.CommandPrompt.ErrorDataReceived
  type: Event
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: ErrorDataReceived
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 29
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nevent handler for error responses return during the execution of the command\n"
  example: []
  syntax:
    content: public event DataReceivedEventHandler ErrorDataReceived
    return:
      type: System.Diagnostics.DataReceivedEventHandler
    content.vb: Public Event ErrorDataReceived As DataReceivedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  commentId: P:DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  id: CreateNoWindow
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CreateNoWindow
  nameWithType: CommandPrompt.CreateNoWindow
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  type: Property
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: CreateNoWindow
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 55
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public bool CreateNoWindow { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CreateNoWindow As Boolean
  overload: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor
  id: '#ctor'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt()
  nameWithType: CommandPrompt.CommandPrompt()
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt()
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 58
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt()
    content.vb: Public Sub New
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt(Boolean)
  nameWithType: CommandPrompt.CommandPrompt(Boolean)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 63
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt(bool hideWindow)
    parameters:
    - id: hideWindow
      type: System.Boolean
    content.vb: Public Sub New(hideWindow As Boolean)
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt(String, String, Boolean)
  nameWithType: CommandPrompt.CommandPrompt(String, String, Boolean)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 68
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt(string runAsUser, string password, bool hideWindow)
    parameters:
    - id: runAsUser
      type: System.String
    - id: password
      type: System.String
    - id: hideWindow
      type: System.Boolean
    content.vb: Public Sub New(runAsUser As String, password As String, hideWindow As Boolean)
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  id: UpdateDefaultUserAndPassword(System.String,System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: UpdateDefaultUserAndPassword(String, String)
  nameWithType: CommandPrompt.UpdateDefaultUserAndPassword(String, String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: UpdateDefaultUserAndPassword
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 81
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public void UpdateDefaultUserAndPassword(string runAsUser, string password)
    parameters:
    - id: runAsUser
      type: System.String
    - id: password
      type: System.String
    content.vb: Public Sub UpdateDefaultUserAndPassword(runAsUser As String, password As String)
  overload: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  id: CreateSecurePassword(System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CreateSecurePassword(String)
  nameWithType: CommandPrompt.CreateSecurePassword(String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: CreateSecurePassword
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 92
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\n\n"
  example: []
  syntax:
    content: public SecureString CreateSecurePassword(string password)
    parameters:
    - id: password
      type: System.String
      description: ''
    return:
      type: System.Security.SecureString
      description: ''
    content.vb: Public Function CreateSecurePassword(password As String) As SecureString
  overload: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo(System.String,System.String,System.Boolean)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo(System.String,System.String,System.Boolean)
  id: CreateStartInfo(System.String,System.String,System.Boolean)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CreateStartInfo(String, String, Boolean)
  nameWithType: CommandPrompt.CreateStartInfo(String, String, Boolean)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: CreateStartInfo
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 112
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\n\n"
  example: []
  syntax:
    content: public ProcessStartInfo CreateStartInfo(string command, string workingDirectory = "./", bool hideWindow = true)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: hideWindow
      type: System.Boolean
    return:
      type: System.Diagnostics.ProcessStartInfo
      description: 'a new instance of ProcessStartInfo '
    content.vb: Public Function CreateStartInfo(command As String, workingDirectory As String = "./", hideWindow As Boolean = True) As ProcessStartInfo
  overload: DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  id: RunCommand(System.String,System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String, String)
  nameWithType: CommandPrompt.RunCommand(String, String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 135
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process RunCommand(string command, string workingDirectory = "./")
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    return:
      type: System.Diagnostics.Process
      description: 'the process '
    content.vb: Public Function RunCommand(command As String, workingDirectory As String = "./") As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit(System.String,System.String,System.Nullable{System.TimeSpan})
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit(System.String,System.String,System.Nullable{System.TimeSpan})
  id: RunCommandAndWaitForExit(System.String,System.String,System.Nullable{System.TimeSpan})
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommandAndWaitForExit(String, String, Nullable<TimeSpan>)
  nameWithType: CommandPrompt.RunCommandAndWaitForExit(String, String, Nullable<TimeSpan>)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit(System.String, System.String, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: RunCommandAndWaitForExit
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 173
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command and wait for it to exit\n"
  example: []
  syntax:
    content: public (Process process, bool? didProcessExit) RunCommandAndWaitForExit(string command, string workingDirectory = "./", TimeSpan? timeout = default(TimeSpan? ))
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: timeout
      type: System.Nullable{System.TimeSpan}
    return:
      type: System.ValueTuple{System.Diagnostics.Process,System.Nullable{System.Boolean}}
      description: the associated process  and whether or not the process exited
    content.vb: Public Function RunCommandAndWaitForExit(command As String, workingDirectory As String = "./", timeout As TimeSpan? = Nothing) As(process As Process, didProcessExit As Boolean?)
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit*
  nameWithType.vb: CommandPrompt.RunCommandAndWaitForExit(String, String, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit(System.String, System.String, System.Nullable(Of System.TimeSpan))
  name.vb: RunCommandAndWaitForExit(String, String, Nullable(Of TimeSpan))
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RunCommandAndWaitForExitAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommandAndWaitForExitAsync(String, String, CancellationToken)
  nameWithType: CommandPrompt.RunCommandAndWaitForExitAsync(String, String, CancellationToken)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: RunCommandAndWaitForExitAsync
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 224
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Task<Process> RunCommandAndWaitForExitAsync(string command, string workingDirectory = "./", CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: cancellation token for how long the process should wait to be exited
    return:
      type: System.Threading.Tasks.Task{System.Diagnostics.Process}
      description: 'the process '
    content.vb: Public Function RunCommandAndWaitForExitAsync(command As String, workingDirectory As String = "./", cancellationToken As CancellationToken = Nothing) As Task(Of Process)
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.Dispose
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.Dispose
  id: Dispose
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: CommandPrompt.Dispose()
  fullName: DotNetHelper_CommandLine.CommandPrompt.Dispose()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-CommandLine.git
    id: Dispose
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 261
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotNetHelper_CommandLine.CommandPrompt.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DotNetHelper_CommandLine
  commentId: N:DotNetHelper_CommandLine
  name: DotNetHelper_CommandLine
  nameWithType: DotNetHelper_CommandLine
  fullName: DotNetHelper_CommandLine
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_CommandLine.CommandPrompt.RunAsUser*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  name: RunAsUser
  nameWithType: CommandPrompt.RunAsUser
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Diagnostics.DataReceivedEventHandler
  commentId: T:System.Diagnostics.DataReceivedEventHandler
  parent: System.Diagnostics
  isExternal: true
  name: DataReceivedEventHandler
  nameWithType: DataReceivedEventHandler
  fullName: System.Diagnostics.DataReceivedEventHandler
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  name: CreateNoWindow
  nameWithType: CommandPrompt.CreateNoWindow
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.#ctor
  name: CommandPrompt
  nameWithType: CommandPrompt.CommandPrompt
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt
- uid: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword
  name: UpdateDefaultUserAndPassword
  nameWithType: CommandPrompt.UpdateDefaultUserAndPassword
  fullName: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword
  name: CreateSecurePassword
  nameWithType: CommandPrompt.CreateSecurePassword
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  parent: System.Security
  isExternal: true
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security
  commentId: N:System.Security
  isExternal: true
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo
  name: CreateStartInfo
  nameWithType: CommandPrompt.CreateStartInfo
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateStartInfo
- uid: System.Diagnostics.ProcessStartInfo
  commentId: T:System.Diagnostics.ProcessStartInfo
  parent: System.Diagnostics
  isExternal: true
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunCommand
  name: RunCommand
  nameWithType: CommandPrompt.RunCommand
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand
- uid: System.Diagnostics.Process
  commentId: T:System.Diagnostics.Process
  parent: System.Diagnostics
  isExternal: true
  name: Process
  nameWithType: Process
  fullName: System.Diagnostics.Process
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit
  name: RunCommandAndWaitForExit
  nameWithType: CommandPrompt.RunCommandAndWaitForExit
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExit
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Diagnostics.Process,System.Nullable{System.Boolean}}
  commentId: T:System.ValueTuple{System.Diagnostics.Process,System.Nullable{System.Boolean}}
  parent: System
  isExternal: true
  name: ValueTuple<Process, Nullable<Boolean>>
  nameWithType: ValueTuple<Process, Nullable<Boolean>>
  fullName: System.ValueTuple<System.Diagnostics.Process, System.Nullable<System.Boolean>>
  nameWithType.vb: ValueTuple(Of Process, Nullable(Of Boolean))
  fullName.vb: System.ValueTuple(Of System.Diagnostics.Process, System.Nullable(Of System.Boolean))
  name.vb: ValueTuple(Of Process, Nullable(Of Boolean))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync
  name: RunCommandAndWaitForExitAsync
  nameWithType: CommandPrompt.RunCommandAndWaitForExitAsync
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommandAndWaitForExitAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Diagnostics.Process}
  commentId: T:System.Threading.Tasks.Task{System.Diagnostics.Process}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Process>
  nameWithType: Task<Process>
  fullName: System.Threading.Tasks.Task<System.Diagnostics.Process>
  nameWithType.vb: Task(Of Process)
  fullName.vb: System.Threading.Tasks.Task(Of System.Diagnostics.Process)
  name.vb: Task(Of Process)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Process
    name: Process
    nameWithType: Process
    fullName: System.Diagnostics.Process
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: DotNetHelper_CommandLine.CommandPrompt.Dispose*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.Dispose
  name: Dispose
  nameWithType: CommandPrompt.Dispose
  fullName: DotNetHelper_CommandLine.CommandPrompt.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
