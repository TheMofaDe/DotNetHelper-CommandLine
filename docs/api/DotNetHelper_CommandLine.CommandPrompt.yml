### YamlMime:ManagedReference
items:
- uid: DotNetHelper_CommandLine.CommandPrompt
  commentId: T:DotNetHelper_CommandLine.CommandPrompt
  id: CommandPrompt
  parent: DotNetHelper_CommandLine
  children:
  - DotNetHelper_CommandLine.CommandPrompt.#ctor
  - DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  - DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  - DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  - DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  - DotNetHelper_CommandLine.CommandPrompt.Dispose
  - DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String)
  - DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String)
  - DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String)
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  - DotNetHelper_CommandLine.CommandPrompt.TimeOut
  - DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  langs:
  - csharp
  - vb
  name: CommandPrompt
  nameWithType: CommandPrompt
  fullName: DotNetHelper_CommandLine.CommandPrompt
  type: Class
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: CommandPrompt
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 12
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nA command-line helper class that makes it easy to run commands.\n"
  example: []
  syntax:
    content: 'public class CommandPrompt : IDisposable'
    content.vb: >-
      Public Class CommandPrompt
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  commentId: P:DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  id: RunAsUser
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunAsUser
  nameWithType: CommandPrompt.RunAsUser
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  type: Property
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunAsUser
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 14
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public string RunAsUser { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RunAsUser As String
  overload: DotNetHelper_CommandLine.CommandPrompt.RunAsUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_CommandLine.CommandPrompt.TimeOut
  commentId: P:DotNetHelper_CommandLine.CommandPrompt.TimeOut
  id: TimeOut
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: TimeOut
  nameWithType: CommandPrompt.TimeOut
  fullName: DotNetHelper_CommandLine.CommandPrompt.TimeOut
  type: Property
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: TimeOut
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 17
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public TimeSpan TimeOut { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property TimeOut As TimeSpan
  overload: DotNetHelper_CommandLine.CommandPrompt.TimeOut*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  commentId: P:DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  id: CreateNoWindow
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CreateNoWindow
  nameWithType: CommandPrompt.CreateNoWindow
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  type: Property
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: CreateNoWindow
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 42
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public bool CreateNoWindow { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CreateNoWindow As Boolean
  overload: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor
  id: '#ctor'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt()
  nameWithType: CommandPrompt.CommandPrompt()
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt()
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 45
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt()
    content.vb: Public Sub New
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt(Boolean)
  nameWithType: CommandPrompt.CommandPrompt(Boolean)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 50
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt(bool hideWindow)
    parameters:
    - id: hideWindow
      type: System.Boolean
    content.vb: Public Sub New(hideWindow As Boolean)
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CommandPrompt(String, String, Boolean)
  nameWithType: CommandPrompt.CommandPrompt(String, String, Boolean)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: .ctor
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 55
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public CommandPrompt(string runAsUser, string password, bool hideWindow)
    parameters:
    - id: runAsUser
      type: System.String
    - id: password
      type: System.String
    - id: hideWindow
      type: System.Boolean
    content.vb: Public Sub New(runAsUser As String, password As String, hideWindow As Boolean)
  overload: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String,System.String)
  id: UpdateDefaultUserAndPassword(System.String,System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: UpdateDefaultUserAndPassword(String, String)
  nameWithType: CommandPrompt.UpdateDefaultUserAndPassword(String, String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: UpdateDefaultUserAndPassword
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 68
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public void UpdateDefaultUserAndPassword(string runAsUser, string password)
    parameters:
    - id: runAsUser
      type: System.String
    - id: password
      type: System.String
    content.vb: Public Sub UpdateDefaultUserAndPassword(runAsUser As String, password As String)
  overload: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  id: CreateSecurePassword(System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: CreateSecurePassword(String)
  nameWithType: CommandPrompt.CreateSecurePassword(String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: CreateSecurePassword
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 79
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\n\n"
  example: []
  syntax:
    content: public SecureString CreateSecurePassword(string password)
    parameters:
    - id: password
      type: System.String
      description: ''
    return:
      type: System.Security.SecureString
      description: ''
    content.vb: Public Function CreateSecurePassword(password As String) As SecureString
  overload: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  id: RunCommand(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  nameWithType: CommandPrompt.RunCommand(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String, System.EventHandler, System.Diagnostics.DataReceivedEventHandler, System.Diagnostics.DataReceivedEventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 124
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public int? RunCommand(string command, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    - id: outputDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for responses return during the execution of the command
    - id: errorDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for error responses return during the execution of the command
    return:
      type: System.Nullable{System.Int32}
      description: 'the process Exit Code '
    content.vb: Public Function RunCommand(command As String, exited As EventHandler, outputDataReceived As DataReceivedEventHandler, errorDataReceived As DataReceivedEventHandler) As Integer?
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler)
  id: RunCommand(System.String,System.String,System.EventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String, String, EventHandler)
  nameWithType: CommandPrompt.RunCommand(String, String, EventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String, System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 136
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public int? RunCommand(string command, string workingDirectory, EventHandler exited)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    return:
      type: System.Nullable{System.Int32}
      description: 'the process Exit Code '
    content.vb: Public Function RunCommand(command As String, workingDirectory As String, exited As EventHandler) As Integer?
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String)
  id: RunCommand(System.String,System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String, String)
  nameWithType: CommandPrompt.RunCommand(String, String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 147
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public int? RunCommand(string command, string workingDirectory)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    return:
      type: System.Nullable{System.Int32}
      description: 'the process Exit Code '
    content.vb: Public Function RunCommand(command As String, workingDirectory As String) As Integer?
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String)
  id: RunCommand(System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String)
  nameWithType: CommandPrompt.RunCommand(String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 157
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public int? RunCommand(string command)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    return:
      type: System.Nullable{System.Int32}
      description: 'the process Exit Code '
    content.vb: Public Function RunCommand(command As String) As Integer?
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  id: RunCommand(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: RunCommand(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  nameWithType: CommandPrompt.RunCommand(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand(System.String, System.String, System.EventHandler, System.Diagnostics.DataReceivedEventHandler, System.Diagnostics.DataReceivedEventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: RunCommand
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 171
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public int? RunCommand(string command, string workingDirectory, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    - id: outputDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for responses return during the execution of the command
    - id: errorDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for error responses return during the execution of the command
    return:
      type: System.Nullable{System.Int32}
      description: 'the process Exit Code '
    content.vb: Public Function RunCommand(command As String, workingDirectory As String, exited As EventHandler, outputDataReceived As DataReceivedEventHandler, errorDataReceived As DataReceivedEventHandler) As Integer?
  overload: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  id: GetProcess(System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: GetProcess(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  nameWithType: CommandPrompt.GetProcess(String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String, System.EventHandler, System.Diagnostics.DataReceivedEventHandler, System.Diagnostics.DataReceivedEventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: GetProcess
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 220
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process GetProcess(string command, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    - id: outputDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for responses return during the execution of the command
    - id: errorDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for error responses return during the execution of the command
    return:
      type: System.Diagnostics.Process
      description: 'the process '
    content.vb: Public Function GetProcess(command As String, exited As EventHandler, outputDataReceived As DataReceivedEventHandler, errorDataReceived As DataReceivedEventHandler) As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler)
  id: GetProcess(System.String,System.String,System.EventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: GetProcess(String, String, EventHandler)
  nameWithType: CommandPrompt.GetProcess(String, String, EventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String, System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: GetProcess
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 232
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process GetProcess(string command, string workingDirectory, EventHandler exited)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    return:
      type: System.Diagnostics.Process
      description: 'the process  '
    content.vb: Public Function GetProcess(command As String, workingDirectory As String, exited As EventHandler) As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String)
  id: GetProcess(System.String,System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: GetProcess(String, String)
  nameWithType: CommandPrompt.GetProcess(String, String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: GetProcess
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 243
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process GetProcess(string command, string workingDirectory)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    return:
      type: System.Diagnostics.Process
      description: 'the process '
    content.vb: Public Function GetProcess(command As String, workingDirectory As String) As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String)
  id: GetProcess(System.String)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: GetProcess(String)
  nameWithType: CommandPrompt.GetProcess(String)
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: GetProcess
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 253
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process GetProcess(string command)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    return:
      type: System.Diagnostics.Process
      description: 'the process '
    content.vb: Public Function GetProcess(command As String) As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  id: GetProcess(System.String,System.String,System.EventHandler,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: GetProcess(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  nameWithType: CommandPrompt.GetProcess(String, String, EventHandler, DataReceivedEventHandler, DataReceivedEventHandler)
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess(System.String, System.String, System.EventHandler, System.Diagnostics.DataReceivedEventHandler, System.Diagnostics.DataReceivedEventHandler)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: GetProcess
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 267
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  summary: "\nStarts a new instance of a command terminal and runs the specified command\n"
  example: []
  syntax:
    content: public Process GetProcess(string command, string workingDirectory, EventHandler exited, DataReceivedEventHandler outputDataReceived, DataReceivedEventHandler errorDataReceived)
    parameters:
    - id: command
      type: System.String
      description: the command to run
    - id: workingDirectory
      type: System.String
      description: sets the working directory for the command to be run
    - id: exited
      type: System.EventHandler
      description: Occurs when the process exits
    - id: outputDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for responses return during the execution of the command
    - id: errorDataReceived
      type: System.Diagnostics.DataReceivedEventHandler
      description: event handler for error responses return during the execution of the command
    return:
      type: System.Diagnostics.Process
      description: 'the process '
    content.vb: Public Function GetProcess(command As String, workingDirectory As String, exited As EventHandler, outputDataReceived As DataReceivedEventHandler, errorDataReceived As DataReceivedEventHandler) As Process
  overload: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_CommandLine.CommandPrompt.Dispose
  commentId: M:DotNetHelper_CommandLine.CommandPrompt.Dispose
  id: Dispose
  parent: DotNetHelper_CommandLine.CommandPrompt
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: CommandPrompt.Dispose()
  fullName: DotNetHelper_CommandLine.CommandPrompt.Dispose()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-CommandLine/CommandPrompt.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-CommandLine
    id: Dispose
    path: ../src/DotNetHelper-CommandLine/CommandPrompt.cs
    startLine: 300
  assemblies:
  - DotNetHelper-CommandLine
  namespace: DotNetHelper_CommandLine
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotNetHelper_CommandLine.CommandPrompt.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DotNetHelper_CommandLine
  commentId: N:DotNetHelper_CommandLine
  name: DotNetHelper_CommandLine
  nameWithType: DotNetHelper_CommandLine
  fullName: DotNetHelper_CommandLine
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_CommandLine.CommandPrompt.RunAsUser*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunAsUser
  name: RunAsUser
  nameWithType: CommandPrompt.RunAsUser
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunAsUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper_CommandLine.CommandPrompt.TimeOut*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.TimeOut
  name: TimeOut
  nameWithType: CommandPrompt.TimeOut
  fullName: DotNetHelper_CommandLine.CommandPrompt.TimeOut
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
  name: CreateNoWindow
  nameWithType: CommandPrompt.CreateNoWindow
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateNoWindow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_CommandLine.CommandPrompt.#ctor*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.#ctor
  name: CommandPrompt
  nameWithType: CommandPrompt.CommandPrompt
  fullName: DotNetHelper_CommandLine.CommandPrompt.CommandPrompt
- uid: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword
  name: UpdateDefaultUserAndPassword
  nameWithType: CommandPrompt.UpdateDefaultUserAndPassword
  fullName: DotNetHelper_CommandLine.CommandPrompt.UpdateDefaultUserAndPassword
- uid: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword
  name: CreateSecurePassword
  nameWithType: CommandPrompt.CreateSecurePassword
  fullName: DotNetHelper_CommandLine.CommandPrompt.CreateSecurePassword
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  parent: System.Security
  isExternal: true
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security
  commentId: N:System.Security
  isExternal: true
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: DotNetHelper_CommandLine.CommandPrompt.RunCommand*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.RunCommand
  name: RunCommand
  nameWithType: CommandPrompt.RunCommand
  fullName: DotNetHelper_CommandLine.CommandPrompt.RunCommand
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Diagnostics.DataReceivedEventHandler
  commentId: T:System.Diagnostics.DataReceivedEventHandler
  parent: System.Diagnostics
  isExternal: true
  name: DataReceivedEventHandler
  nameWithType: DataReceivedEventHandler
  fullName: System.Diagnostics.DataReceivedEventHandler
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_CommandLine.CommandPrompt.GetProcess*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.GetProcess
  name: GetProcess
  nameWithType: CommandPrompt.GetProcess
  fullName: DotNetHelper_CommandLine.CommandPrompt.GetProcess
- uid: System.Diagnostics.Process
  commentId: T:System.Diagnostics.Process
  parent: System.Diagnostics
  isExternal: true
  name: Process
  nameWithType: Process
  fullName: System.Diagnostics.Process
- uid: DotNetHelper_CommandLine.CommandPrompt.Dispose*
  commentId: Overload:DotNetHelper_CommandLine.CommandPrompt.Dispose
  name: Dispose
  nameWithType: CommandPrompt.Dispose
  fullName: DotNetHelper_CommandLine.CommandPrompt.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
